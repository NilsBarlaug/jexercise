/**
 */
package no.hal.emfs.ui.provider;

import java.util.ArrayList;
import java.util.Collection;

import no.hal.emfs.util.EmfsAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class EmfsItemProviderAdapterFactory extends EmfsAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EmfsItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.emfs.EmfsResource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EmfsResourceItemProvider emfsResourceItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.emfs.EmfsResource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEmfsResourceAdapter() {
		if (emfsResourceItemProvider == null) {
			emfsResourceItemProvider = new EmfsResourceItemProvider(this);
		}

		return emfsResourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.emfs.TagsOwner} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TagsOwnerItemProvider tagsOwnerItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.emfs.TagsOwner}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTagsOwnerAdapter() {
		if (tagsOwnerItemProvider == null) {
			tagsOwnerItemProvider = new TagsOwnerItemProvider(this);
		}

		return tagsOwnerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.emfs.PropertyOwner} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyOwnerItemProvider propertyOwnerItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.emfs.PropertyOwner}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyOwnerAdapter() {
		if (propertyOwnerItemProvider == null) {
			propertyOwnerItemProvider = new PropertyOwnerItemProvider(this);
		}

		return propertyOwnerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.emfs.Property} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyItemProvider propertyItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.emfs.Property}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyAdapter() {
		if (propertyItemProvider == null) {
			propertyItemProvider = new PropertyItemProvider(this);
		}

		return propertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.emfs.EmfsContainer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EmfsContainerItemProvider emfsContainerItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.emfs.EmfsContainer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEmfsContainerAdapter() {
		if (emfsContainerItemProvider == null) {
			emfsContainerItemProvider = new EmfsContainerItemProvider(this);
		}

		return emfsContainerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.emfs.EmfsResourcesRef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EmfsResourcesRefItemProvider emfsResourcesRefItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.emfs.EmfsResourcesRef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEmfsResourcesRefAdapter() {
		if (emfsResourcesRefItemProvider == null) {
			emfsResourcesRefItemProvider = new EmfsResourcesRefItemProvider(this);
		}

		return emfsResourcesRefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.emfs.GitContentProvider} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GitContentProviderItemProvider gitContentProviderItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.emfs.GitContentProvider}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGitContentProviderAdapter() {
		if (gitContentProviderItemProvider == null) {
			gitContentProviderItemProvider = new GitContentProviderItemProvider(this);
		}

		return gitContentProviderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.emfs.EmfsFile} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EmfsFileItemProvider emfsFileItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.emfs.EmfsFile}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEmfsFileAdapter() {
		if (emfsFileItemProvider == null) {
			emfsFileItemProvider = new EmfsFileItemProvider(this);
		}

		return emfsFileItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.emfs.ByteArrayContentProvider} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ByteArrayContentProviderItemProvider byteArrayContentProviderItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.emfs.ByteArrayContentProvider}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createByteArrayContentProviderAdapter() {
		if (byteArrayContentProviderItemProvider == null) {
			byteArrayContentProviderItemProvider = new ByteArrayContentProviderItemProvider(this);
		}

		return byteArrayContentProviderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.emfs.StringContentProvider} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringContentProviderItemProvider stringContentProviderItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.emfs.StringContentProvider}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringContentProviderAdapter() {
		if (stringContentProviderItemProvider == null) {
			stringContentProviderItemProvider = new StringContentProviderItemProvider(this);
		}

		return stringContentProviderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.emfs.VerbatimStringContents} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VerbatimStringContentsItemProvider verbatimStringContentsItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.emfs.VerbatimStringContents}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVerbatimStringContentsAdapter() {
		if (verbatimStringContentsItemProvider == null) {
			verbatimStringContentsItemProvider = new VerbatimStringContentsItemProvider(this);
		}

		return verbatimStringContentsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.emfs.PropertyValueString} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyValueStringItemProvider propertyValueStringItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.emfs.PropertyValueString}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyValueStringAdapter() {
		if (propertyValueStringItemProvider == null) {
			propertyValueStringItemProvider = new PropertyValueStringItemProvider(this);
		}

		return propertyValueStringItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.emfs.WrappingStringContentProvider} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WrappingStringContentProviderItemProvider wrappingStringContentProviderItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.emfs.WrappingStringContentProvider}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWrappingStringContentProviderAdapter() {
		if (wrappingStringContentProviderItemProvider == null) {
			wrappingStringContentProviderItemProvider = new WrappingStringContentProviderItemProvider(this);
		}

		return wrappingStringContentProviderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.emfs.URLContentProvider} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected URLContentProviderItemProvider urlContentProviderItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.emfs.URLContentProvider}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createURLContentProviderAdapter() {
		if (urlContentProviderItemProvider == null) {
			urlContentProviderItemProvider = new URLContentProviderItemProvider(this);
		}

		return urlContentProviderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.emfs.GitURLContentProvider} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GitURLContentProviderItemProvider gitURLContentProviderItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.emfs.GitURLContentProvider}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGitURLContentProviderAdapter() {
		if (gitURLContentProviderItemProvider == null) {
			gitURLContentProviderItemProvider = new GitURLContentProviderItemProvider(this);
		}

		return gitURLContentProviderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.emfs.GitRepoRef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GitRepoRefItemProvider gitRepoRefItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.emfs.GitRepoRef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGitRepoRefAdapter() {
		if (gitRepoRefItemProvider == null) {
			gitRepoRefItemProvider = new GitRepoRefItemProvider(this);
		}

		return gitRepoRefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.emfs.GitContentRef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GitContentRefItemProvider gitContentRefItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.emfs.GitContentRef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGitContentRefAdapter() {
		if (gitContentRefItemProvider == null) {
			gitContentRefItemProvider = new GitContentRefItemProvider(this);
		}

		return gitContentRefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.emfs.CachingContentProvider} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CachingContentProviderItemProvider cachingContentProviderItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.emfs.CachingContentProvider}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCachingContentProviderAdapter() {
		if (cachingContentProviderItemProvider == null) {
			cachingContentProviderItemProvider = new CachingContentProviderItemProvider(this);
		}

		return cachingContentProviderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.emfs.DotClasspathFileContentProvider} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DotClasspathFileContentProviderItemProvider dotClasspathFileContentProviderItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.emfs.DotClasspathFileContentProvider}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDotClasspathFileContentProviderAdapter() {
		if (dotClasspathFileContentProviderItemProvider == null) {
			dotClasspathFileContentProviderItemProvider = new DotClasspathFileContentProviderItemProvider(this);
		}

		return dotClasspathFileContentProviderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.emfs.ClasspathEntry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClasspathEntryItemProvider classpathEntryItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.emfs.ClasspathEntry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClasspathEntryAdapter() {
		if (classpathEntryItemProvider == null) {
			classpathEntryItemProvider = new ClasspathEntryItemProvider(this);
		}

		return classpathEntryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.emfs.DotProjectFileContentProvider} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DotProjectFileContentProviderItemProvider dotProjectFileContentProviderItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.emfs.DotProjectFileContentProvider}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDotProjectFileContentProviderAdapter() {
		if (dotProjectFileContentProviderItemProvider == null) {
			dotProjectFileContentProviderItemProvider = new DotProjectFileContentProviderItemProvider(this);
		}

		return dotProjectFileContentProviderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.emfs.XmlStringContents} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XmlStringContentsItemProvider xmlStringContentsItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.emfs.XmlStringContents}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXmlStringContentsAdapter() {
		if (xmlStringContentsItemProvider == null) {
			xmlStringContentsItemProvider = new XmlStringContentsItemProvider(this);
		}

		return xmlStringContentsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.emfs.XmlContents} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XmlContentsItemProvider xmlContentsItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.emfs.XmlContents}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXmlContentsAdapter() {
		if (xmlContentsItemProvider == null) {
			xmlContentsItemProvider = new XmlContentsItemProvider(this);
		}

		return xmlContentsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.emfs.XmlPIElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XmlPIElementItemProvider xmlPIElementItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.emfs.XmlPIElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXmlPIElementAdapter() {
		if (xmlPIElementItemProvider == null) {
			xmlPIElementItemProvider = new XmlPIElementItemProvider(this);
		}

		return xmlPIElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.emfs.XmlTagElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XmlTagElementItemProvider xmlTagElementItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.emfs.XmlTagElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXmlTagElementAdapter() {
		if (xmlTagElementItemProvider == null) {
			xmlTagElementItemProvider = new XmlTagElementItemProvider(this);
		}

		return xmlTagElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.emfs.XmlTag} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XmlTagItemProvider xmlTagItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.emfs.XmlTag}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXmlTagAdapter() {
		if (xmlTagItemProvider == null) {
			xmlTagItemProvider = new XmlTagItemProvider(this);
		}

		return xmlTagItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.emfs.XmlAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XmlAttributeItemProvider xmlAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.emfs.XmlAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXmlAttributeAdapter() {
		if (xmlAttributeItemProvider == null) {
			xmlAttributeItemProvider = new XmlAttributeItemProvider(this);
		}

		return xmlAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.emfs.EmfResourceStringContents} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EmfResourceStringContentsItemProvider emfResourceStringContentsItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.emfs.EmfResourceStringContents}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEmfResourceStringContentsAdapter() {
		if (emfResourceStringContentsItemProvider == null) {
			emfResourceStringContentsItemProvider = new EmfResourceStringContentsItemProvider(this);
		}

		return emfResourceStringContentsItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (emfsResourceItemProvider != null) emfsResourceItemProvider.dispose();
		if (tagsOwnerItemProvider != null) tagsOwnerItemProvider.dispose();
		if (propertyOwnerItemProvider != null) propertyOwnerItemProvider.dispose();
		if (propertyItemProvider != null) propertyItemProvider.dispose();
		if (emfsContainerItemProvider != null) emfsContainerItemProvider.dispose();
		if (emfsResourcesRefItemProvider != null) emfsResourcesRefItemProvider.dispose();
		if (gitContentProviderItemProvider != null) gitContentProviderItemProvider.dispose();
		if (emfsFileItemProvider != null) emfsFileItemProvider.dispose();
		if (byteArrayContentProviderItemProvider != null) byteArrayContentProviderItemProvider.dispose();
		if (stringContentProviderItemProvider != null) stringContentProviderItemProvider.dispose();
		if (verbatimStringContentsItemProvider != null) verbatimStringContentsItemProvider.dispose();
		if (propertyValueStringItemProvider != null) propertyValueStringItemProvider.dispose();
		if (wrappingStringContentProviderItemProvider != null) wrappingStringContentProviderItemProvider.dispose();
		if (urlContentProviderItemProvider != null) urlContentProviderItemProvider.dispose();
		if (gitURLContentProviderItemProvider != null) gitURLContentProviderItemProvider.dispose();
		if (gitRepoRefItemProvider != null) gitRepoRefItemProvider.dispose();
		if (gitContentRefItemProvider != null) gitContentRefItemProvider.dispose();
		if (cachingContentProviderItemProvider != null) cachingContentProviderItemProvider.dispose();
		if (dotClasspathFileContentProviderItemProvider != null) dotClasspathFileContentProviderItemProvider.dispose();
		if (classpathEntryItemProvider != null) classpathEntryItemProvider.dispose();
		if (dotProjectFileContentProviderItemProvider != null) dotProjectFileContentProviderItemProvider.dispose();
		if (xmlStringContentsItemProvider != null) xmlStringContentsItemProvider.dispose();
		if (xmlContentsItemProvider != null) xmlContentsItemProvider.dispose();
		if (xmlPIElementItemProvider != null) xmlPIElementItemProvider.dispose();
		if (xmlTagElementItemProvider != null) xmlTagElementItemProvider.dispose();
		if (xmlTagItemProvider != null) xmlTagItemProvider.dispose();
		if (xmlAttributeItemProvider != null) xmlAttributeItemProvider.dispose();
		if (emfResourceStringContentsItemProvider != null) emfResourceStringContentsItemProvider.dispose();
	}

}
