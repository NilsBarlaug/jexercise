/**
 */
package no.hal.emfs.sync.provider;

import java.util.ArrayList;
import java.util.Collection;

import no.hal.emfs.sync.util.SyncAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SyncItemProviderAdapterFactory extends SyncAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SyncItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.emfs.sync.ExportSpec} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExportSpecItemProvider exportSpecItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.emfs.sync.ExportSpec}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExportSpecAdapter() {
		if (exportSpecItemProvider == null) {
			exportSpecItemProvider = new ExportSpecItemProvider(this);
		}

		return exportSpecItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.emfs.sync.PortSpec} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PortSpecItemProvider portSpecItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.emfs.sync.PortSpec}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPortSpecAdapter() {
		if (portSpecItemProvider == null) {
			portSpecItemProvider = new PortSpecItemProvider(this);
		}

		return portSpecItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.emfs.sync.PathRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PathRuleItemProvider pathRuleItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.emfs.sync.PathRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPathRuleAdapter() {
		if (pathRuleItemProvider == null) {
			pathRuleItemProvider = new PathRuleItemProvider(this);
		}

		return pathRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.emfs.sync.ExportRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExportRuleItemProvider exportRuleItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.emfs.sync.ExportRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExportRuleAdapter() {
		if (exportRuleItemProvider == null) {
			exportRuleItemProvider = new ExportRuleItemProvider(this);
		}

		return exportRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.emfs.sync.CompositeResourceCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompositeResourceConditionItemProvider compositeResourceConditionItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.emfs.sync.CompositeResourceCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompositeResourceConditionAdapter() {
		if (compositeResourceConditionItemProvider == null) {
			compositeResourceConditionItemProvider = new CompositeResourceConditionItemProvider(this);
		}

		return compositeResourceConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.emfs.sync.NameCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NameConditionItemProvider nameConditionItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.emfs.sync.NameCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNameConditionAdapter() {
		if (nameConditionItemProvider == null) {
			nameConditionItemProvider = new NameConditionItemProvider(this);
		}

		return nameConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.emfs.sync.FullPathCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FullPathConditionItemProvider fullPathConditionItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.emfs.sync.FullPathCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFullPathConditionAdapter() {
		if (fullPathConditionItemProvider == null) {
			fullPathConditionItemProvider = new FullPathConditionItemProvider(this);
		}

		return fullPathConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.emfs.sync.TagsCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TagsConditionItemProvider tagsConditionItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.emfs.sync.TagsCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTagsConditionAdapter() {
		if (tagsConditionItemProvider == null) {
			tagsConditionItemProvider = new TagsConditionItemProvider(this);
		}

		return tagsConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.emfs.sync.PropertiesCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertiesConditionItemProvider propertiesConditionItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.emfs.sync.PropertiesCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertiesConditionAdapter() {
		if (propertiesConditionItemProvider == null) {
			propertiesConditionItemProvider = new PropertiesConditionItemProvider(this);
		}

		return propertiesConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.emfs.sync.RelativePath} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RelativePathItemProvider relativePathItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.emfs.sync.RelativePath}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelativePathAdapter() {
		if (relativePathItemProvider == null) {
			relativePathItemProvider = new RelativePathItemProvider(this);
		}

		return relativePathItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.emfs.sync.ImportSpec} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImportSpecItemProvider importSpecItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.emfs.sync.ImportSpec}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImportSpecAdapter() {
		if (importSpecItemProvider == null) {
			importSpecItemProvider = new ImportSpecItemProvider(this);
		}

		return importSpecItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.emfs.sync.ImportRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImportRuleItemProvider importRuleItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.emfs.sync.ImportRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImportRuleAdapter() {
		if (importRuleItemProvider == null) {
			importRuleItemProvider = new ImportRuleItemProvider(this);
		}

		return importRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.emfs.sync.EmfsResourceRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EmfsResourceRuleItemProvider emfsResourceRuleItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.emfs.sync.EmfsResourceRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEmfsResourceRuleAdapter() {
		if (emfsResourceRuleItemProvider == null) {
			emfsResourceRuleItemProvider = new EmfsResourceRuleItemProvider(this);
		}

		return emfsResourceRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.emfs.sync.TagsRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TagsRuleItemProvider tagsRuleItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.emfs.sync.TagsRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTagsRuleAdapter() {
		if (tagsRuleItemProvider == null) {
			tagsRuleItemProvider = new TagsRuleItemProvider(this);
		}

		return tagsRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.emfs.sync.PropertiesRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertiesRuleItemProvider propertiesRuleItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.emfs.sync.PropertiesRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertiesRuleAdapter() {
		if (propertiesRuleItemProvider == null) {
			propertiesRuleItemProvider = new PropertiesRuleItemProvider(this);
		}

		return propertiesRuleItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (exportSpecItemProvider != null) exportSpecItemProvider.dispose();
		if (portSpecItemProvider != null) portSpecItemProvider.dispose();
		if (pathRuleItemProvider != null) pathRuleItemProvider.dispose();
		if (exportRuleItemProvider != null) exportRuleItemProvider.dispose();
		if (compositeResourceConditionItemProvider != null) compositeResourceConditionItemProvider.dispose();
		if (nameConditionItemProvider != null) nameConditionItemProvider.dispose();
		if (fullPathConditionItemProvider != null) fullPathConditionItemProvider.dispose();
		if (tagsConditionItemProvider != null) tagsConditionItemProvider.dispose();
		if (propertiesConditionItemProvider != null) propertiesConditionItemProvider.dispose();
		if (relativePathItemProvider != null) relativePathItemProvider.dispose();
		if (importSpecItemProvider != null) importSpecItemProvider.dispose();
		if (importRuleItemProvider != null) importRuleItemProvider.dispose();
		if (emfsResourceRuleItemProvider != null) emfsResourceRuleItemProvider.dispose();
		if (tagsRuleItemProvider != null) tagsRuleItemProvider.dispose();
		if (propertiesRuleItemProvider != null) propertiesRuleItemProvider.dispose();
	}

}
