// automatically generated by Xtext
grammar no.hal.emfs.xtext.Xemfs hidden(WS) // with org.eclipse.xtext.common.Terminals

import "platform:/plugin/no.hal.emfs/model/emfs.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

EmfsRoot returns EmfsContainer:
	{EmfsContainer}
	('emfs' (name = EmfsName)?)?
	('#' tags += ID)* (properties += Property)*
	('extends' (contentProvider = (GitContentProvider | EmfsResourcesRef)) ';')?
	'/'
	(resources += EmfsResource)*
;

EmfsName: ID ('.' ID)*;

EmfsResourcesRef:
	resources += [EmfsResource | EmfsName] (',' resources += [EmfsResource | EmfsName])*
	;

ResourceName: '.'? ID ('.' ID)*;

EmfsResource: EmfsContainer | EmfsFile;

Property:
	'$' (name = EmfsName) '=' (value = (STRING | EmfsName))
;

FolderName: ResourceName '/';

EmfsContainer:
	name = FolderName
	('#' tags += EmfsName)* (properties += Property)*
	('extends' contentProvider = (GitContentProvider | EmfsResourcesRef) ';')?
	( resources += EmfsResource )*
	=>';'?
;

GitContentProvider:
	gitRef = GitContentRef
	;

FileName: ResourceName;

EmfsFile:
	name = FileName
	(writeable ?= '*')?
	('#' tags += ID)* (properties += Property)*
	(
		('@' contentProvider = (URLContentProvider | GitURLContentProvider) ';') |
		(contentProvider = (StringContentProvider | WrappingStringContentProvider)) |
		(':' contentProvider = (DotClasspathFileContentProvider | DotProjectFileContentProvider)) |
		(';')
	)
	;

StringContentProvider:
	(stringContents += AbstractStringContents)+	
;

AbstractStringContents: PropertyValueString | VerbatimStringContents | XmlStringContents;

terminal STRING_CONTENT: '8<---'('\r')?'\n' -> '\n--->8';

VerbatimStringContents:
	('---' (writeable ?= '*')? ('#' tags += ID)* (properties += Property)*)?
	stringContent = (STRING | STRING_CONTENT)
;

PropertyValueString:
	'$' (writeable ?= '*')? ((propertyName = ID) | ('{' (propertyName = EmfsName) '}'))
	(':' defaultValue = (STRING | EmfsName))?
;

WrappingStringContentProvider:
	('[' prefix = AbstractStringContents ']')
	('@' contentProvider = (URLContentProvider | GitURLContentProvider))
	('[' suffix = AbstractStringContents ']')
;
PROPERTY_REF: '$' (('{' EmfsName '}') | ID);
URL_SCHEME: ('http' | 'https' | 'ftp' | 'file');
URL_HOST_NAME: ID ('.' ID)+;
URL_HOST: '//' ((URL_HOST_NAME (':' ('0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9')+)?) | PROPERTY_REF);
URL_PATH: '/' (FolderName | (PROPERTY_REF '/'))* (FileName | PROPERTY_REF);

URL: URL_SCHEME ':' URL_HOST? URL_PATH;

URLContentProvider: urlString = (STRING | URL);

GitURLContentProvider:
	gitRef = GitContentRef
	;

// git@github.com:me/mytestrepo.git

GitContentRef:
	'git' '@' ((host = (URL_HOST_NAME | PROPERTY_REF) (':' owner = (ID | PROPERTY_REF))?) | (owner = (ID | PROPERTY_REF))) '/' repo = ID (path = URL_PATH)?	
;

DotClasspathFileContentProvider: 
	'dot.classpath'
		(entries += AbstractClasspathEntry)+
	';'
;

AbstractClasspathEntry: ClasspathEntry;

CLASSPATH_ENTRY_PATH: (FolderName* FileName);

ClasspathEntry:
	explicitKind = ClasspathEntryKind (absolute ?= '/')? explicitPath = CLASSPATH_ENTRY_PATH
	('(' major = VERSION ('.' minor = VERSION)? ')')?
;

enum ClasspathEntryKind: 
	src = 'source-folder'| output = 'output-folder' | lib = 'library-jar' | con = 'class-container'
;

VERSION returns ecore::EInt: ('0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9')+;

DotProjectFileContentProvider:
	'dot.project'
		('#' keys += (STRING | FileName))+
		('@' linkedResources += [EmfsResource | EmfsName] (',' linkedResources += [EmfsResource | EmfsName])*)*
	';'
;

// XML grammar

XmlStringContents:
	'<<' element = XmlElement '>>'
;

XmlElement: XmlPIElement | XmlTagElement;

XmlPIElement:
	'?' name = ID (attributes += XmlAttribute)* '?'
;

XmlTagElement:
	startTag = XmlTag ('/' |
		(pre = XML_TEXT (contents += XmlContents)* ('/' (endTag = XmlTagName)?)
		)
	)
;
XmlTagName: ID (':' ID)?;

XmlContents:
	element = XmlElement
	post = XML_TEXT
;

XmlTag:
	name = XmlTagName (attributes += XmlAttribute)*	
;

XmlAttribute:
	name = ID ('=' (value = (STRING | XmlInt)))?
;

XmlInt: (('1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9')('0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9')*) |
	(('0')
		(
		(('b')('0'|'1')+) |
		(('o')('0'|'1'|'2'|'3'|'4'|'5'|'6'|'7')+) |
		(('x')('0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9'|'a'|'b'|'c'|'d'|'e'|'f')+)
		)
	)
;

// Terminals except int and comments

// Slightly more permissive
terminal ID  		: '^'?('a'..'z'|'A'..'Z'|'_'|'-'|'0'..'9')+;
terminal STRING	: 
			'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
			"'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'"
		;

terminal WS			: (' '|'\t'|'\r'|'\n')+;

terminal XML_TEXT: '>' ('<' | (! ('<'|'>')) (! '<')* ('<'));
